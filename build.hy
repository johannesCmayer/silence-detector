(import sys)
(import os)
(import shutil)
(import pathlib [Path])

(setv hy-executable (Path (get os.environ "hyExecutable")))

(setv output-directory (Path (get os.environ "out")))
(setv output-bin-path (/ output-directory "bin"))
(setv output-exec-path (/ output-bin-path "vocal-reward"))

;; The hy file to turn into an executable
(setv main-file (Path (get os.environ "main")))

;; Create the bin directory
(.mkdir output-bin-path :parents True :exist_ok True)

(defn add-hy-shebang [file]
  (.write file f"#!{hy-executable}\n"))

(defn add-python-path [file]
  (.write file f"(import sys)\n")
  (for [path (.split (get os.environ "PYTHONPATH") ":")]
    (.write file f"(sys.path.append \"{path}\")\n")))

(defn inline-path [file]
  (.write file f"(import os)\n")
  (.write file f"(setv (get os.environ \"PATH\") \"{(get os.environ "PATH")}\" + \":\" + (get os.environ \"PATH\"))\n"))

(defn copy-sound-file [file]
  (shutil.copyfile (get os.environ "nice_beep")
                   (/ output-bin-path "nice_beep.mp3"))
  (.write file f"(setv (get os.environ \"nice_beep\") \"{(get os.environ "nice_beep")}\")\n"))

(defn insert-file-contents [path-to-add file]
  (with [src-file (open path-to-add "rt")]
    (.write file (.read src-file))))

(defn build []
  (with [file (open output-exec-path "wt")]
    (add-hy-shebang file)
    (add-python-path file)
    (inline-path file)
    (copy-sound-file file)
    (insert-file-contents main-file file)
    (.write file f";; END nix autogenerated preamble\n\n\n"))
  (os.chmod output-exec-path 0744))

(when (= __name__ "__main__")
  (build))
